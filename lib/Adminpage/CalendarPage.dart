import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:myproject/Adminpage/CalendarPage/MakeAnnouncementPage.dart';
import 'package:myproject/Adminpage/CalendarPage/PracticeDetailPage.dart';
import 'package:myproject/Adminpage/CalendarPage/SetPracticeDatePage.dart';
import 'package:myproject/constant.dart';
import 'package:table_calendar/table_calendar.dart';
// import 'SetPracticeDatePage.dart'; // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Practice
// import 'MakeAnnouncementPage.dart'; // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° Announcement

class CalendarPage extends StatefulWidget {
  @override
  _CalendarPageState createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  late DateTime _selectedDate;
  FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void initState() {
    super.initState();
    _selectedDate = DateTime.now();
  }

  /// üìå ‡∏î‡∏∂‡∏á `announcement` ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  Stream<List<Map<String, dynamic>>> _getAnnouncements() {
    return _firestore
        .collection('Announcement')
        .orderBy('ann_date',
            descending: false) // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        return {
          'id': doc.id,
          'title': doc['ann_title'],
          'date': (doc['ann_date'] as Timestamp)
              .toDate(), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Timestamp ‡πÄ‡∏õ‡πá‡∏ô DateTime
          'start_time': doc['ann_start_time'],
          'detail': doc['ann_detail'],
        };
      }).toList();
    });
  }

  /// üìå ‡∏î‡∏∂‡∏á `practice` ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  Stream<List<Map<String, dynamic>>> _getPractices() {
    return _firestore
        .collection('pratice') // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏∞‡∏Å‡∏î‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Firestore
        .orderBy('prt_date', descending: false)
        .snapshots()
        .map((snapshot) {
      return snapshot.docs.map((doc) {
        try {
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á `prt_date` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô `DateTime`
          DateTime practiceDate;
          if (doc['prt_date'] is Timestamp) {
            practiceDate = (doc['prt_date'] as Timestamp).toDate();
          } else if (doc['prt_date'] is String) {
            practiceDate = DateTime.parse(doc['prt_date']);
          } else {
            throw Exception("Invalid prt_date format: ${doc['prt_date']}");
          }

          // ‚úÖ ‡πÉ‡∏ä‡πâ `??` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô `null`
          return {
            'id': doc.id,
            'title': doc.data().containsKey('prt_title')
                ? doc['prt_title'] ?? "No Title"
                : "No Title",
            'date': practiceDate,
            'start_time': doc.data().containsKey('prt_start_time')
                ? doc['prt_start_time'] ?? "No Time"
                : "No Time",
            'detail': doc.data().containsKey('prt_detail')
                ? doc['prt_detail'] ?? "No Details"
                : "No Details",
          };
        } catch (e) {
          print("‚ùå Error parsing practice: ${doc.id} - $e");
          return <String, dynamic>{}; // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Map ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        }
      }).toList();
    });
  }

  /// üìå ‡∏•‡∏ö `announcement` ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  void _deleteAnnouncement(String id) async {
    try {
      await _firestore
          .collection('Announcement')
          .doc(id)
          .delete(); // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ Collection
      setState(() {}); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("‚úÖ Announcement deleted")));
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("‚ùå Failed to delete: $e")));
    }
  }

  /// üìå ‡∏•‡∏ö `practice` ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  void _deletePractice(String id, DateTime practiceDate) async {
    try {
      FirebaseFirestore firestore = FirebaseFirestore.instance;

      // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ `practice` ‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      await firestore
          .collection('pratice')
          .doc(id)
          .delete(); // üî• ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `practice_users` ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö `practiceDate`
      QuerySnapshot query = await firestore
          .collection('practice_users')
          .where('prt_date', isEqualTo: practiceDate)
          .get();

      // ‚úÖ ‡πÉ‡∏ä‡πâ Batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô `practice_users`
      WriteBatch batch = firestore.batch();
      for (var doc in query.docs) {
        batch.delete(doc.reference);
      }
      await batch.commit(); // ‚úÖ ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      setState(() {});

      // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚úÖ Practice deleted successfully!")));
    } catch (e) {
      print("‚ùå Error deleting practice: $e");
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚ùå Failed to delete practice.")));
    }
  }

  // /// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á `Timestamp` ‡πÄ‡∏õ‡πá‡∏ô `String`
  // String _formatDate(Timestamp timestamp) {
  //   DateTime dateTime = timestamp.toDate();
  //   return DateFormat('dd MMM yy HH:mm').format(dateTime);
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
          title: Text(
            'Schedule',
            style: TextStyle(color: Colors.white),
          ),
          backgroundColor: red),
      body: Column(
        children: [
          /// üîπ **‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô**
          TableCalendar(
            focusedDay: _selectedDate,
            firstDay: DateTime.utc(2020, 1, 1),
            lastDay: DateTime.utc(2025, 12, 31),
            selectedDayPredicate: (day) => isSameDay(day, _selectedDate),
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _selectedDate = selectedDay;
              });
            },
          ),

          /// üîπ **‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ `ListView` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î Error**
          Expanded(
            child: ListView(
              children: [
                _buildSectionTitle(
                  'Events/Announcement',
                ),
                StreamBuilder<List<Map<String, dynamic>>>(
                  stream: _getAnnouncements(),
                  builder: (context, snapshot) {
                    if (!snapshot.hasData || snapshot.data!.isEmpty) {
                      return _buildNoDataMessage("No announcements.");
                    }
                    return Column(
                      children: snapshot.data!.map((announcement) {
                        return _buildAnnouncementCard(announcement);
                      }).toList(),
                    );
                  },
                ),
                _buildSectionTitle('Practice'),
                StreamBuilder<List<Map<String, dynamic>>>(
                  stream: _getPractices(),
                  builder: (context, snapshot) {
                    if (!snapshot.hasData || snapshot.data!.isEmpty) {
                      return _buildNoDataMessage("No practices.");
                    }
                    return Column(
                      children: snapshot.data!.map((practice) {
                        return _buildPracticeCard(practice);
                      }).toList(),
                    );
                  },
                ),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: _buildFab(),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: EdgeInsets.all(16.0),
      child: Text(title,
          style:
              TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: red)),
    );
  }

  Widget _buildNoDataMessage(String message) {
    return Padding(
      padding: EdgeInsets.all(8.0),
      child: Text(message, style: TextStyle(fontSize: 14, color: Colors.grey)),
    );
  }

  Widget _buildAnnouncementCard(Map<String, dynamic> announcement) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á `announcement['date']` ‡πÄ‡∏õ‡πá‡∏ô `DateTime`
    DateTime date;
    if (announcement['date'] is Timestamp) {
      date = (announcement['date'] as Timestamp).toDate();
    } else if (announcement['date'] is DateTime) {
      date = announcement['date'];
    } else {
      date = DateTime.now(); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ó‡∏ô
    }

    return Card(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: ListTile(
        leading: Icon(Icons.textsms, color: red),
        title: Text(announcement['title']),
        subtitle: Text(
          '${_formatDate(date)} - ${announcement['start_time']}\n${announcement['detail']}',
        ),
        trailing: IconButton(
          icon: Icon(Icons.more_vert),
          onPressed: () => _deleteAnnouncement(announcement['id']),
        ),
      ),
    );
  }

  /// üìå ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ `_formatDate()` ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö `DateTime`
  String _formatDate(DateTime dateTime) {
    return DateFormat('dd MMM yy HH:mm').format(dateTime);
  }

  Widget _buildPracticeCard(Map<String, dynamic> practice) {
    return GestureDetector(
      onTap: () {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => PracticeDetailPage(
                practiceId: practice['id']), // ‚úÖ ‡πÉ‡∏ä‡πâ doc.id ‡πÄ‡∏õ‡πá‡∏ô practiceId
          ),
        );
      },
      child: Card(
        margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        child: ListTile(
          leading: Icon(Icons.access_time, color: Colors.deepOrangeAccent),
          title: Text(practice['title']),
          subtitle: Text(
              '${_formatDate(practice['date'])} - ${practice['start_time']}\n${practice['detail']}'),
          trailing: Icon(Icons.arrow_forward_ios, size: 16, color: Colors.grey),
        ),
      ),
    );
  }

  Widget _buildFab() {
    return FloatingActionButton.extended(
      label: Text("Create",style: TextStyle(color: Colors.white),),
      icon: Icon(Icons.add,color: Colors.white,),
      backgroundColor: red,
      onPressed: () => _showCreateOptions(),
    );
  }

  void _showCreateOptions() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          ListTile(
            title: Text("Announcement"),
            leading: Icon(Icons.textsms),
            onTap: () {
              Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Bottom Sheet ‡∏Å‡πà‡∏≠‡∏ô
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => MakeAnnouncementPage(
                      selectedDate: _selectedDate), // ‚úÖ ‡∏™‡πà‡∏á selectedDate ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                ),
              );
            },
          ),
          ListTile(
            title: Text("Practice"),
            leading: Icon(Icons.access_time),
            onTap: () {
              Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Bottom Sheet ‡∏Å‡πà‡∏≠‡∏ô
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => SetPracticeDatePage(
                      selectedDate: _selectedDate), // ‚úÖ ‡∏™‡πà‡∏á selectedDate ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
