import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class EditAnnouncementPage extends StatefulWidget {
  final String announcementId;

  EditAnnouncementPage({required this.announcementId});

  @override
  _EditAnnouncementPageState createState() => _EditAnnouncementPageState();
}

class _EditAnnouncementPageState extends State<EditAnnouncementPage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _detailController = TextEditingController();

  DateTime? _annDate;
  String? _annStartTime;
  String? _annEndTime;

  bool _isLoading = true; // ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

  @override
  void initState() {
    super.initState();
    _fetchAnnouncementData();
  }

  /// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Announcement
  Future<void> _fetchAnnouncementData() async {
    try {
      DocumentSnapshot doc = await FirebaseFirestore.instance
          .collection('Announcement')
          .doc(widget.announcementId)
          .get();

      if (!doc.exists) {
        print("‚ùå Announcement not found");
        Navigator.pop(context);
        return;
      }

      Map<String, dynamic> data = doc.data() as Map<String, dynamic>;

      setState(() {
        _titleController.text = data['ann_title'] ?? '';
        _detailController.text = data['ann_detail'] ?? '';

        if (data['ann_date'] is Timestamp) {
          _annDate = (data['ann_date'] as Timestamp).toDate();
        }
        _annStartTime = data['ann_start_time'] ?? '';
        _annEndTime = data['ann_end_time'] ?? '';

        _isLoading = false;
      });
    } catch (e) {
      print("‚ùå Error fetching announcement: $e");
      Navigator.pop(context);
    }
  }

  /// üìå ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  void _confirmUpdateDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Confirm Update'),
        content: Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
        actions: [
          TextButton(
            child: Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(color: Colors.grey)),
            onPressed: () => Navigator.pop(context),
          ),
          TextButton(
            child: Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(color: Colors.redAccent)),
            onPressed: () {
              Navigator.pop(context);  // ‡∏õ‡∏¥‡∏î dialog
              _updateAnnouncement();   // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            },
          ),
        ],
      ),
    );
  }

  /// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Firestore
  Future<void> _updateAnnouncement() async {
    try {
      await FirebaseFirestore.instance
          .collection('Announcement')
          .doc(widget.announcementId)
          .update({
        'ann_title': _titleController.text.trim(),
        'ann_detail': _detailController.text.trim(),
      });

      // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")),
      );

      // üîπ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
      Navigator.pop(context);
    } catch (e) {
      print("‚ùå Error updating announcement: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ: $e")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(
          title: Text("Edit Announcement"),
          backgroundColor: Colors.redAccent,
        ),
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text("Edit Announcement"),
        backgroundColor: Colors.redAccent,
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "Announcement on ${_titleController.text}",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 16),

              /// üîπ **Title** (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)
              TextField(
                controller: _titleController,
                decoration: InputDecoration(
                  labelText: "Announcement Title",
                  hintText: "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏î‡∏¥‡∏°",
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),

              /// üîπ **Date** (‡∏•‡πá‡∏≠‡∏Å, ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ)
              TextField(
                enabled: false,
                decoration: InputDecoration(
                  labelText: "Date",
                  border: OutlineInputBorder(),
                ),
                controller: TextEditingController(
                  text: _annDate != null
                      ? DateFormat('dd / MM / yyyy').format(_annDate!)
                      : "No Date",
                ),
              ),
              SizedBox(height: 16),

              /// üîπ **Start - End Time** (‡∏•‡πá‡∏≠‡∏Å, ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ)
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      enabled: false,
                      decoration: InputDecoration(
                        labelText: "Start Time",
                        border: OutlineInputBorder(),
                      ),
                      controller: TextEditingController(text: _annStartTime),
                    ),
                  ),
                  SizedBox(width: 8),
                  Expanded(
                    child: TextField(
                      enabled: false,
                      decoration: InputDecoration(
                        labelText: "End Time",
                        border: OutlineInputBorder(),
                      ),
                      controller: TextEditingController(text: _annEndTime),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 16),

              /// üîπ **Detail** (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)
              TextField(
                controller: _detailController,
                maxLines: 4,
                decoration: InputDecoration(
                  labelText: "Detail",
                  hintText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏î‡∏¥‡∏°",
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),

              /// üîπ **‡∏õ‡∏∏‡πà‡∏° Save** ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _confirmUpdateDialog,
                  child: Text("Save"),
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
