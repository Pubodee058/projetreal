import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class SetPracticeDatePage extends StatefulWidget {
  final DateTime selectedDate; // ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å `AdminSchedulePage`

  SetPracticeDatePage({required this.selectedDate});

  @override
  _SetPracticeDatePageState createState() => _SetPracticeDatePageState();
}

class _SetPracticeDatePageState extends State<SetPracticeDatePage> {
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _detailController = TextEditingController();
  final TextEditingController _budgetLateController = TextEditingController();
  final TextEditingController _budgetOTController = TextEditingController();
  TimeOfDay? _startTime;
  TimeOfDay? _endTime;
  FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å `practice`
  _savePractice() async {
    if (_titleController.text.isEmpty ||
        _startTime == null ||
        _endTime == null) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö!")));
      return;
    }

    await _firestore.collection('pratice').add({
      'prt_title': _titleController.text,
      'prt_date':
          Timestamp.fromDate(widget.selectedDate), // ‚úÖ ‡∏•‡πá‡∏≠‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
      'prt_start_time': "${_startTime!.hour}:${_startTime!.minute}",
      'prt_end_time': "${_endTime!.hour}:${_endTime!.minute}",
      'prt_detail': _detailController.text,
      'prt_budget_ot': _budgetOTController.text.isNotEmpty
          ? double.tryParse(_budgetOTController.text)
          : null, // ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô `null`
      'prt_budget_late': _budgetLateController.text.isNotEmpty
          ? double.tryParse(_budgetLateController.text)
          : null, // ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô `null`
      'pay_date': null, // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô `null` ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    });

    ScaffoldMessenger.of(context)
        .showSnackBar(SnackBar(content: Text("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")));
    Navigator.pop(context);
  }

  /// üìå UI ‡∏ü‡∏≠‡∏£‡πå‡∏°
  @override
Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Set Practice Date"), backgroundColor: Colors.redAccent),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            /// üîπ Title
            TextField(controller: _titleController, decoration: InputDecoration(labelText: "Practice Title")),

            /// üîπ ‡∏•‡πá‡∏≠‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
            ListTile(
              title: Text(DateFormat('dd / MM / yyyy').format(widget.selectedDate)),
              leading: Icon(Icons.calendar_today, color: Colors.grey), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            ),

            /// üîπ Start Time ‡πÅ‡∏•‡∏∞ End Time
            Row(
              children: [
                Expanded(
                  child: ListTile(
                    title: Text(_startTime != null ? _startTime!.format(context) : "Start Time"),
                    leading: Icon(Icons.access_time),
                    onTap: () async {
                      TimeOfDay? pickedTime = await showTimePicker(context: context, initialTime: TimeOfDay.now());
                      if (pickedTime != null) setState(() => _startTime = pickedTime);
                    },
                  ),
                ),
                Expanded(
                  child: ListTile(
                    title: Text(_endTime != null ? _endTime!.format(context) : "End Time"),
                    leading: Icon(Icons.access_time),
                    onTap: () async {
                      TimeOfDay? pickedTime = await showTimePicker(context: context, initialTime: TimeOfDay.now());
                      if (pickedTime != null) setState(() => _endTime = pickedTime);
                    },
                  ),
                ),
              ],
            ),

            /// üîπ Detail
            TextField(controller: _detailController, decoration: InputDecoration(labelText: "Detail")),

            /// üîπ Budget OT (Optional)
            TextField(controller: _budgetOTController, keyboardType: TextInputType.number, decoration: InputDecoration(labelText: "Budget for on-time person")),

            /// üîπ Budget Late (Optional)
            TextField(controller: _budgetLateController, keyboardType: TextInputType.number, decoration: InputDecoration(labelText: "Budget for late person")),

            SizedBox(height: 20),

            /// üîπ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            ElevatedButton(
              onPressed: _savePractice,
              child: Text("Save"),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
            ),
          ],
        ),
      ),
    );
  }
}
